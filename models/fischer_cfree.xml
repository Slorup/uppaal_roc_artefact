<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 1;
typedef int[0,N-1] pid_t;

chan free;
chan take;
chan release;</declaration>
	<template>
		<name x="5" y="5">Process</name>
		<parameter>const pid_t pid</parameter>
		<declaration>// Place local declarations here.
clock x;
const int k = 2;
const int t = 5;
const int c = 300;
const int r = 1000;</declaration>
		<location id="id0" x="-153" y="-110">
			<name x="-229" y="-119">inactive</name>
			<label kind="invariant" x="-187" y="-153">x &lt;= 15</label>
		</location>
		<location id="id1" x="17" y="-110">
			<name x="7" y="-144">req</name>
			<label kind="invariant" x="42" y="-144">x &lt;= k &amp;&amp;
cost'==c</label>
		</location>
		<location id="id2" x="17" y="42">
			<name x="-17" y="102">wait_taken</name>
			<label kind="invariant" x="-17" y="59">x &lt;= 2 * k &amp;&amp;
cost'==c</label>
		</location>
		<location id="id3" x="-153" y="42">
			<name x="-161" y="59">cs</name>
			<label kind="invariant" x="-289" y="25">x &lt;= 5 &amp;&amp;
reward'==r</label>
		</location>
		<location id="id4" x="127" y="-34">
			<name x="144" y="-42">wait_nottaken</name>
			<label kind="invariant" x="144" y="-25">x&lt;=2*k &amp;&amp; 
cost'==c</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="110" y="-102">x&gt;=1</label>
			<label kind="synchronisation" x="119" y="-85">free!</label>
			<label kind="assignment" x="119" y="-68">x:=0</label>
			<nail x="92" y="-110"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="110" y="8">take?</label>
			<nail x="85" y="42"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="17" y="-59">free!</label>
			<label kind="assignment" x="17" y="-34">x:=0</label>
			<nail x="59" y="0"/>
			<nail x="59" y="-68"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-221" y="-51">x == 5</label>
			<label kind="synchronisation" x="-212" y="-68">take?</label>
			<label kind="assignment" x="-212" y="-34">x:=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-110" y="51">x &gt;= k + 1</label>
			<label kind="assignment" x="-93" y="68">x:=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-76" y="-59">x &lt;= k</label>
			<label kind="synchronisation" x="-59" y="-42">take!</label>
			<label kind="assignment" x="-67" y="-25">x := 0</label>
			<nail x="-17" y="-68"/>
			<nail x="-17" y="0"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-93" y="-127">free!</label>
			<label kind="assignment" x="-93" y="-110">x:=0</label>
		</transition>
	</template>
	<template>
		<name>Free</name>
		<location id="id5" x="-93" y="-17">
			<name x="-127" y="-93">nottaken</name>
		</location>
		<location id="id6" x="76" y="-17">
			<name x="59" y="-93">taken</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="127" y="-25">free?</label>
			<nail x="119" y="-51"/>
			<nail x="119" y="8"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-34" y="25">take?</label>
			<nail x="42" y="25"/>
			<nail x="-59" y="25"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-25" y="-76">take!</label>
			<nail x="-59" y="-59"/>
			<nail x="42" y="-59"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
system Process, Free;</system>
	<queries>
		<query>
			<formula>A[] forall (i:pid_t) forall (j:pid_t) Process(i).cs &amp;&amp; Process(j).cs imply i == j</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (forall (i:pid_t) Process(i).req implies (A&lt;&gt; Process(i).cs))</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
