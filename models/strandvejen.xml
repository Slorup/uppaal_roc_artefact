<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 1; // Number of fridges

typedef int[0,N-1] fridge_id_t;

chan withdraw[N];
chan refill[N];</declaration>
	<template>
		<name x="5" y="5">Refrigerator</name>
		<parameter>const fridge_id_t id, const int value</parameter>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="238" y="-17">
			<name x="212" y="-59">count0</name>
		</location>
		<location id="id1" x="110" y="-17">
			<name x="85" y="-59">count1</name>
		</location>
		<location id="id2" x="-17" y="-17">
			<name x="-42" y="-59">count2</name>
		</location>
		<location id="id3" x="-144" y="-17">
			<name x="-170" y="-59">count3</name>
		</location>
		<location id="id4" x="-272" y="-17">
			<name x="-297" y="-59">count4</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="144" y="42">refill[id]?</label>
			<nail x="238" y="68"/>
			<nail x="-272" y="68"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="17" y="42">refill[id]?</label>
			<nail x="110" y="68"/>
			<nail x="-272" y="68"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-246" y="42">refill[id]?</label>
			<nail x="-17" y="68"/>
			<nail x="-272" y="68"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-110" y="42">refill[id]?</label>
			<nail x="-144" y="68"/>
			<nail x="-272" y="68"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-255" y="-42">withdraw[id]?</label>
			<label kind="assignment" x="-263" y="-8">reward += value</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-127" y="-42">withdraw[id]?</label>
			<label kind="assignment" x="-136" y="-8">reward += value</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="0" y="-42">withdraw[id]?</label>
			<label kind="assignment" x="-8" y="-8">reward += value</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="127" y="-42">withdraw[id]?</label>
			<label kind="assignment" x="119" y="-8">reward += value</label>
		</transition>
	</template>
	<template>
		<name>Consumer</name>
		<parameter>const int min_time, const int max_time</parameter>
		<declaration>clock x;</declaration>
		<location id="id5" x="8" y="0">
			<name x="-76" y="-17">Active</name>
			<label kind="invariant" x="-127" y="0">x &lt;= max_time</label>
		</location>
		<location id="id6" x="8" y="110">
			<name x="-76" y="102">Inactive</name>
			<label kind="invariant" x="34" y="102">x &lt;= max_time</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-42" y="170">x == max_time</label>
			<label kind="assignment" x="-7" y="161">x := 0</label>
			<nail x="51" y="161"/>
			<nail x="-25" y="161"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="-34" y="-136">r: fridge_id_t</label>
			<label kind="guard" x="-42" y="-119">x &gt;= min_time</label>
			<label kind="synchronisation" x="-34" y="-102">withdraw[r]!</label>
			<label kind="assignment" x="-17" y="-85">x := 0</label>
			<nail x="-34" y="-68"/>
			<nail x="51" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Volunteer</name>
		<parameter>const int work_reward, const int transit_time</parameter>
		<declaration>clock x;</declaration>
		<location id="id7" x="-144" y="0">
			<name x="-195" y="-110">GroupRoom</name>
			<label kind="invariant" x="-289" y="-17">reward' == 
work_reward &amp;&amp;
x &lt;= 10</label>
		</location>
		<location id="id8" x="85" y="0">
			<name x="51" y="-110">Strandvejen</name>
			<label kind="invariant" x="51" y="17">cost' == 1 &amp;&amp;
x &lt;= 10</label>
		</location>
		<location id="id9" x="-25" y="0">
			<name x="-51" y="-110">Transit</name>
			<label kind="invariant" x="-93" y="68">x &lt;= transit_time &amp;&amp;
cost' == 1</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-195" y="-85">r: fridge_id_t</label>
			<label kind="synchronisation" x="-187" y="-68">withdraw[r]!</label>
			<label kind="assignment" x="-170" y="-51">x := 0</label>
			<nail x="-178" y="-51"/>
			<nail x="-119" y="-51"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-153" y="51">x == transit_time</label>
			<label kind="assignment" x="-102" y="34">x:=0</label>
			<nail x="-85" y="34"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="0" y="34">x := 0</label>
			<nail x="25" y="34"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-34" y="-51">x == transit_time</label>
			<nail x="25" y="-34"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="assignment" x="-110" y="-51">x := 0</label>
			<nail x="-85" y="-34"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="select" x="170" y="-25">r: fridge_id_t</label>
			<label kind="synchronisation" x="170" y="-8">refill[r]!</label>
			<nail x="162" y="-25"/>
			<nail x="162" y="25"/>
		</transition>
	</template>
	<system>
Fridge1 = Refrigerator(0, 7);
Fridge2 = Refrigerator(0, 3);
Consumer1 = Consumer(2, 6);
Consumer2 = Consumer(2, 5);
//Consumer3 = Consumer(6, 13);
Volunteer1 = Volunteer(1, 6);


system Fridge1, Fridge2, Consumer1, Consumer2, Volunteer1;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
